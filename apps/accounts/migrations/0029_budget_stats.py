# Generated by Django 4.2.1 on 2023-07-14 01:43

from django.db import migrations

BUDGET_STATS_SQL = """
CREATE OR REPLACE FUNCTION budget_stats(p_office_id int, start_date date, end_date date)
    RETURNS TABLE
            (
                slug          varchar,
                name          varchar,
                amount        decimal,
                budget_amount decimal,
                spend         decimal
            )
    LANGUAGE plpgsql
AS
$$
DECLARE
    dr daterange = daterange(start_date, end_date, '[]');
BEGIN
    RETURN QUERY
        WITH budgets_with_intervals AS (SELECT ab.id,
                                               ab.month,
                                               CASE
                                                   WHEN basis = 1 THEN adjusted_production
                                                   ELSE collection END                                  as amount,
                                               daterange(ab.month, date(ab.month + interval '1 month')) as month_range
                                        FROM accounts_budget ab
                                        WHERE office_id = p_office_id),
             budgets_for_range as (SELECT bi.id,
                                          bi.month,
                                          bi.amount,
                                          bi.month_range,
                                          bi.month_range * dr as intersection_part
                                   FROM budgets_with_intervals bi
                                   WHERE month_range && dr),
             budgets_with_ratios AS (SELECT bfr.id,
                                            bfr.month,
                                            bfr.amount,
                                            upper(bfr.month_range) -
                                            lower(bfr.month_range)             as total_days,

                                            upper(bfr.intersection_part) -
                                            lower(bfr.intersection_part) as intersection_days
                                     FROM budgets_for_range bfr),
             amount_ratio AS (SELECT bwr.id,
                                     bwr.month,
                                     bwr.amount * bwr.intersection_days / bwr.total_days as amount
                              FROM budgets_with_ratios bwr),
             subaccount_ratio as (SELECT asub.slug,
                                         asub.percentage,
                                         ar.amount                         as budget_amount,
                                         asub.percentage * ar.amount / 100 as subaccount_amount
                                  FROM accounts_subaccount asub
                                           JOIN amount_ratio ar
                                                ON asub.budget_id = ar.id),
             vop_stats AS (SELECT vop.budget_spend_type              as slug,
                                  SUM(vop.quantity * vop.unit_price) as order_amount
                           FROM orders_vendororderproduct vop
                                    JOIN orders_vendororder ov on vop.vendor_order_id = ov.id
                                    JOIN orders_order oo ON ov.order_id = oo.id
                           WHERE ov.order_date <@ dr
                             and ov.status != 'pendingapproval'
                             AND oo.office_id = p_office_id
                           GROUP BY budget_spend_type),
             subaccount_aggs as (SELECT sr.slug,
                                        SUM(sr.subaccount_amount) as subaccount_amount,
                                        SUM(sr.budget_amount)     as budget_amount
                                 FROM subaccount_ratio sr
                                 GROUP BY sr.slug),
             subaccount_names as (
                SELECT DISTINCT ON (sr.slug) sr.slug, sr.name
                FROM accounts_subaccount sr
                    JOIN accounts_budget a on sr.budget_id = a.id
                WHERE a.office_id=p_office_id
                ORDER BY sr.slug, a.month DESC
             ),
             subaccounts_with_spends AS (SELECT sa.slug,
                                                sn.name,
                                                sa.subaccount_amount,
                                                sa.budget_amount,
                                                COALESCE(vs.order_amount, 0) as spend
                                         FROM subaccount_aggs sa JOIN subaccount_names sn ON sa.slug = sn.slug
                                                  LEFT JOIN vop_stats vs
                                                            ON sa.slug = vs.slug)
        SELECT *
        FROM subaccounts_with_spends;
END;
$$;
"""

BUDGET_FULL_STATS_SQL = """
CREATE OR REPLACE FUNCTION budget_full_stats(p_office_id int, start_date date, end_date date)
    RETURNS jsonb
    LANGUAGE plpgsql
AS
$$
DECLARE
    start_year_date date = make_date(extract(year from end_date)::int, 1, 1);
    result jsonb;
BEGIN
    WITH results as (SELECT ytdt.slug as slug,
                            ytdt.name as name,
                            jsonb_build_object(
                                    'amount', ytdt.amount,
                                    'budget_amount', ytdt.budget_amount,
                                    'spend', ytdt.spend
                                )     as ytd,
                            mnt.amount,
                            mnt.budget_amount,
                            mnt.spend
                     FROM budget_stats(p_office_id, start_year_date, end_date) ytdt
                              JOIN budget_stats(p_office_id, start_date, end_date) mnt ON ytdt.slug = mnt.slug)
    SELECT jsonb_agg(t) FROM results t
    INTO result;
    return result;
end;
$$;
"""

class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0028_alter_subaccount_slug_and_more"),
    ]

    operations = [
        migrations.RunSQL(BUDGET_STATS_SQL, migrations.RunSQL.noop),
        migrations.RunSQL(BUDGET_FULL_STATS_SQL, migrations.RunSQL.noop),
    ]
