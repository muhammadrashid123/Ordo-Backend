"""
Django settings for ordo_backend project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
import os
from pathlib import Path

from corsheaders.defaults import default_headers
from dotenv import load_dotenv

from config.utils import get_bool_config
from services.utils.secrets import get_secret_value

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent.parent
load_dotenv(BASE_DIR / ".env")
TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = []

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework.authtoken",
    "django_rest_passwordreset",
    "corsheaders",
    "django_filters",
    "phonenumber_field",
    "django_celery_beat",
    "nested_admin",
    "django_extensions",
    "django_admin_inline_paginator",
    "colorfield",
]

ORDO_APPS = [
    "apps.accounts.apps.AccountsConfig",
    "apps.common.apps.CommonConfig",
    "apps.orders.apps.OrdersConfig",
    "apps.notifications.apps.NotificationsConfig",
    "apps.audit.apps.AuditConfig",
    "apps.greetings",
    "apps.waitlist",
    "apps.admin_view",
    "apps.api_integration",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + ORDO_APPS
EXPOSE_SCHEMA = get_bool_config("EXPOSE_SCHEMA", False)

if EXPOSE_SCHEMA and "drf_spectacular" not in INSTALLED_APPS:
    INSTALLED_APPS.append("drf_spectacular")

# if EXPOSE_SCHEMA:
#     INSTALLED_APPS.append("debug_toolbar")

MIDDLEWARE = [
    # "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]
ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATES_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

CELERY_MODE = get_bool_config("CELERY_MODE", False)

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("RDS_DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("RDS_DB_NAME", os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": os.environ.get("RDS_USERNAME", "user"),
        "PASSWORD": os.environ.get("RDS_PASSWORD", "password"),
        "HOST": os.environ.get("RDS_HOSTNAME", "localhost"),
        "PORT": os.environ.get("RDS_PORT", "5432"),
        "TEST": {
            "NAME": "ordo_db_test",
        },
        "CONN_MAX_AGE": 0 if CELERY_MODE else None,
        "CONN_HEALTH_CHECKS": True,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.User"
STAGE = os.environ.get("STAGE")

# AWS
AWS_SES_REGION_NAME = os.getenv("AWS_SES_REGION_NAME")
AWS_SES_REGION_ENDPOINT = os.getenv("AWS_SES_REGION_ENDPOINT")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_DEFAULT_ACL = None
AWS_S3_CUSTOM_DOMAIN = "cdn.staging.joinordo.com"
AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}

# Email Settings
DEFAULT_FROM_EMAIL = "Gordo from Ordo <noreply@joinordo.com>"
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = get_secret_value("EMAIL_HOST_PASSWORD")

# Frontend Settings
SITE_URL = os.getenv("SITE_URL", "http://localhost:8000")

# Django Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_RENDERER_CLASSES": [
        "apps.common.renders.APIRenderer",
    ],
    # "DEFAULT_PAGINATION_CLASS": "apps.common.pagination.StandardResultsSetPagination",
    # "PAGE_SIZE": 20,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "EXCEPTION_HANDLER": "config.exception_handler.custom_exception_handler",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

if EXPOSE_SCHEMA:
    REST_FRAMEWORK["DEFAULT_SCHEMA_CLASS"] = "drf_spectacular.openapi.AutoSchema"

# DRF-JWT
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(days=3),
    "UPDATE_LAST_LOGIN": True,
}

STATIC_LOCATION = "/static/"
STATICFILES_STORAGE = "apps.common.storage_backends.StaticStorage"

PUBLIC_MEDIA_LOCATION = "/media/"
DEFAULT_FILE_STORAGE = "apps.common.storage_backends.PublicMediaStorage"

# phone number field settings
PHONENUMBER_DB_FORMAT = "NATIONAL"
PHONENUMBER_DEFAULT_REGION = "US"

# Stripe
STRIPE_API_KEY = get_secret_value("STRIPE_API_KEY")
STRIPE_SUBSCRIPTION_PRICE_ID = os.getenv("STRIPE_SUBSCRIPTION_PRICE_ID")
PRODUCT_PRICE_UPDATE_CYCLE = 14
NET32_PRODUCT_PRICE_UPDATE_CYCLE = 14

RUNSERVER_PLUS_PRINT_SQL_TRUNCATE = None

# Vendor API Keys
DENTAL_CITY_AUTH_KEY = get_secret_value("DENTAL_CITY_AUTH_KEY")

CORS_EXPOSE_HEADERS = [
    "Content-Disposition",
]

CORS_ALLOW_HEADERS = (*default_headers, "sentry-trace", "baggage")

HAR_RECORDINGS_BUCKET_NAME = os.getenv("HAR_RECORDINGS_BUCKET_NAME", "ordo-har-recordings")

TRACE_SESSIONS = get_bool_config("TRACE_SESSIONS", False)
